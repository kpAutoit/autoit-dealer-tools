<?php
// phpcs:ignoreFile -- this is not a core file
namespace Biltorvet\Helper;

/**
 * Class MailFormatter
 */
class MailFormatter
{
    const BOLD_PREFIX = '<b>';
    const BOLD_SUFFIX = '</b>';
    const NEW_LINE = "\n\r";

    /**
     * @var string
     */
    public static $formattedMessage;

    /**
     * Takes a string message generated by wp and replaces newlines.
     *
     * @param  string $message
     * @param  string $needle
     * @return string
     */
    public static function ConvertNewLines(string $message, string $needle = "\n"): string
    {
        return str_replace($needle, self::NEW_LINE, $message);
    }

    /**
     * Filters input-labels from a message body and puts them in a bold html tag.
     *
     * @param  string $message
     * @param  string $delimiter
     * @return string
     */
    public static function MakeLabelsBold(string $message, string $delimiter = "\n"): string
    {

        /**
*
         *
 * @var string[] $lines
*/
        $lines = explode($delimiter, $message);

        foreach ($lines as $line) {

            /**
*
             *
 * @var string[] $labelValue
*/
            $labelValue = preg_split('@(?<=: )@', $line);

            if (count($labelValue) > 0) {

                /**
*
                 *
 * @var string $formattedLabel
*/
                $formattedLabel = self::BOLD_PREFIX . $labelValue[0] . self::BOLD_SUFFIX;

                /**
*
                 *
 * @var string $value
*/
                $value = isset($labelValue[1]) ? $labelValue[1] : '';

                self::AppendLineToMessage(self::BuildFormattedLine($formattedLabel, $value));
            } else {
                // @TODO: At this point we return the original message, but invalid messages should be handled.
                $message;
            }
        }

        return self::$formattedMessage;
    }

    /**
     * Filters input-labels from a message body and converts them to uppercase.
     *
     * @param  string $message
     * @param  string $delimiter
     * @return string
     */
    public static function MakeLabelsUppercase(string $message, string $delimiter = "\n"): string
    {
        /**
*
         *
 * @var string[] $lines
*/
        $lines = explode($delimiter, $message);

        foreach ($lines as $line) {

            /**
*
             *
 * @var string[] $labelValue
*/
            $labelValue = preg_split('@(?<=: )@', $line);

            if (count($labelValue) > 0) {

                /**
*
                 *
 * @var string $formattedLabel
*/
                $formattedLabel = mb_strtoupper($labelValue[0], 'UTF-8');

                /**
*
                 *
 * @var string $value
*/
                $value = isset($labelValue[1]) ? $labelValue[1] : '';

                self::AppendLineToMessage(self::BuildFormattedLine($formattedLabel, $value));
            } else {
                // @TODO: At this point we return the original message, but invalid messages should be handled.
                $message;
            }
        }

        return self::$formattedMessage;
    }

    /**
     * Concatinates two strings.
     *
     * @param  string $label
     * @param  string $value
     * @return string
     */
    public static function BuildFormattedLine(string $label, string $value): string
    {
        return $label . $value;
    }

    /**
     * @param  string $line
     * @return string
     */
    public static function AppendLineToMessage(string $line)
    {
        self::$formattedMessage .= self::NEW_LINE . $line;
    }
}
